diff --git a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
index 5c34c84ff8d3..91308ade2b55 100644
--- a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
+++ b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
@@ -56,6 +56,8 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+    HasFloat128 = true;
+    HasFloat16 = true;
   }
 
   bool setCPU(const std::string &Name) override {
diff --git a/external/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp b/external/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp
index 80c1277e6316..a6ab822b99be 100644
--- a/external/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp
+++ b/external/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp
@@ -1898,7 +1898,7 @@ Constant *GetConstantFoldFPValue(double V, Type *Ty) {
 }
 
 #if defined(HAS_IEE754_FLOAT128) && defined(HAS_LOGF128)
-Constant *GetConstantFoldFPValue128(float128 V, Type *Ty) {
+Constant *GetConstantFoldFPValue128(_Float128 V, Type *Ty) {
   if (Ty->isFP128Ty())
     return ConstantFP::get(Ty, V);
   llvm_unreachable("Can only constant fold fp128");
@@ -1944,7 +1944,7 @@ Constant *ConstantFoldFP(double (*NativeFP)(double), const APFloat &V,
 }
 
 #if defined(HAS_IEE754_FLOAT128) && defined(HAS_LOGF128)
-Constant *ConstantFoldFP128(float128 (*NativeFP)(float128), const APFloat &V,
+Constant *ConstantFoldFP128(_Float128 (*NativeFP)(_Float128), const APFloat &V,
                             Type *Ty) {
   llvm_fenv_clearexcept();
   float128 Result = NativeFP(V.convertToQuad());
diff --git a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index 2282dc895561..0a899526b689 100644
--- a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -197,6 +197,9 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
         setOperationAction(ISD::UINT_TO_FP, MVT::i64, Custom);
       }
     }
+
+    setLibcallName(RTLIB::FPEXT_F16_F32, "__extendhfsf2");
+    setLibcallName(RTLIB::FPROUND_F32_F16, "__truncsfhf2");
   }
 
   // Set operations for 'D' feature.
@@ -224,6 +227,9 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
     setOperationAction(ISD::FP16_TO_FP, MVT::f64, Expand);
     setOperationAction(ISD::FP_TO_FP16, MVT::f64, Expand);
 
+
+    setOperationAction(ISD::SPLAT_VECTOR, MVT::f16, Custom);
+
     if (Subtarget.is64Bit())
       setOperationAction(ISD::FRINT, MVT::f64, Legal);
   }
