diff --git a/c10/util/Registry.h b/c10/util/Registry.h
index 3dd3ec54fd..1477e0b549 100644
--- a/c10/util/Registry.h
+++ b/c10/util/Registry.h
@@ -13,7 +13,10 @@
 #include <cstdlib>
 #include <functional>
 #include <memory>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <mutex>
+#pragma pop_macro("__glibcxx_assert")
 #include <stdexcept>
 #include <string>
 #include <unordered_map>
diff --git a/c10/util/StringUtil.h b/c10/util/StringUtil.h
index 88a91c84ef..9f0b4ffa99 100644
--- a/c10/util/StringUtil.h
+++ b/c10/util/StringUtil.h
@@ -7,7 +7,10 @@
 
 #include <cstddef>
 #include <ostream>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <sstream>
+#pragma pop_macro("__glibcxx_assert")
 #include <string>
 
 C10_CLANG_DIAGNOSTIC_PUSH()
diff --git a/aten/src/ATen/miopen/Exceptions.h b/aten/src/ATen/miopen/Exceptions.h
index f5f0a4785b..a21eacd94c 100644
--- a/aten/src/ATen/miopen/Exceptions.h
+++ b/aten/src/ATen/miopen/Exceptions.h
@@ -3,7 +3,11 @@
 #include <ATen/miopen/miopen-wrapper.h>
 #include <string>
 #include <stdexcept>
+
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <sstream>
+#pragma pop_macro("__glibcxx_assert")
 
 namespace at { namespace native {
 
diff --git a/c10/core/SymInt.h b/c10/core/SymInt.h
index 9fc40f428f..1e4c751ac1 100644
--- a/c10/core/SymInt.h
+++ b/c10/core/SymInt.h
@@ -9,7 +9,10 @@
 
 #include <cstdint>
 #include <iterator>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <numeric>
+#pragma pop_macro("__glibcxx_assert")
 #include <optional>
 #include <ostream>
 #include <type_traits>
diff --git a/c10/core/SymNodeImpl.h b/c10/core/SymNodeImpl.h
index 0847af2fce..8ea0ba2ac0 100644
--- a/c10/core/SymNodeImpl.h
+++ b/c10/core/SymNodeImpl.h
@@ -5,7 +5,10 @@
 #include <c10/util/Exception.h>
 #include <c10/util/intrusive_ptr.h>
 #include <cstdint>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <optional>
+#pragma pop_macro("__glibcxx_assert")
 #include <ostream>
 #include <string>
 
diff --git a/c10/core/impl/COWDeleter.h b/c10/core/impl/COWDeleter.h
index e26625a8c7..031bced31d 100644
--- a/c10/core/impl/COWDeleter.h
+++ b/c10/core/impl/COWDeleter.h
@@ -6,7 +6,10 @@
 #include <atomic>
 #include <cstdint>
 #include <memory>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <shared_mutex>
+#pragma pop_macro("__glibcxx_assert")
 #include <variant>
 
 namespace c10::impl::cow {
diff --git a/c10/util/Optional.h b/c10/util/Optional.h
index 1c62bc480e..3c876a0476 100644
--- a/c10/util/Optional.h
+++ b/c10/util/Optional.h
@@ -1,7 +1,11 @@
 #ifndef C10_UTIL_OPTIONAL_H_
 #define C10_UTIL_OPTIONAL_H_
 
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <optional>
+#pragma pop_macro("__glibcxx_assert")
+
 #include <type_traits>
 
 // Macros.h is not needed, but it does namespace shenanigans that lots
diff --git a/c10/util/typeid.h b/c10/util/typeid.h
index 2c6ac38882..2498353391 100644
--- a/c10/util/typeid.h
+++ b/c10/util/typeid.h
@@ -5,7 +5,10 @@
 #include <cstddef>
 #include <cstdint>
 #include <memory>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <mutex>
+#pragma pop_macro("__glibcxx_assert")
 #include <ostream>
 #include <string>
 #include <type_traits>
diff --git a/c10/util/Backtrace.h b/c10/util/Backtrace.h
index 500bf4cf40..bf2ae9fc4c 100644
--- a/c10/util/Backtrace.h
+++ b/c10/util/Backtrace.h
@@ -2,7 +2,10 @@
 #define C10_UTIL_BACKTRACE_H_
 
 #include <cstddef>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <memory>
+#pragma pop_macro("__glibcxx_assert")
 #include <string>
 #include <typeinfo>
 
diff --git a/c10/core/Device.h b/c10/core/Device.h
index cbe9129852..ae2957a69b 100644
--- a/c10/core/Device.h
+++ b/c10/core/Device.h
@@ -6,7 +6,10 @@
 
 #include <cstddef>
 #include <cstdint>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <functional>
+#pragma pop_macro("__glibcxx_assert")
 #include <iosfwd>
 #include <string>
 
diff --git a/c10/core/DispatchKey.h b/c10/core/DispatchKey.h
index 5e417ae4a3..7bd9e286de 100644
--- a/c10/core/DispatchKey.h
+++ b/c10/core/DispatchKey.h
@@ -4,7 +4,10 @@
 #include <c10/macros/Export.h>
 #include <cstddef>
 #include <cstdint>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <functional>
+#pragma pop_macro("__glibcxx_assert")
 #include <ostream>
 #include <string>
 
diff --git a/c10/core/DeviceType.h b/c10/core/DeviceType.h
index 911c863363..247074f065 100644
--- a/c10/core/DeviceType.h
+++ b/c10/core/DeviceType.h
@@ -9,7 +9,10 @@
 
 #include <cstddef>
 #include <cstdint>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
 #include <functional>
+#pragma pop_macro("__glibcxx_assert")
 #include <ostream>
 #include <string>
 
diff --git a/c10/cuda/CUDADeviceAssertion.h b/c10/cuda/CUDADeviceAssertion.h
index 063c783693..a0f922744e 100644
--- a/c10/cuda/CUDADeviceAssertion.h
+++ b/c10/cuda/CUDADeviceAssertion.h
@@ -90,7 +90,7 @@ static __device__ void dsa_add_new_assertion_failure(
     }                                                                    \
   } while (false)
 #else
-#define CUDA_KERNEL_ASSERT2(condition) assert(condition)
+#define CUDA_KERNEL_ASSERT2(condition)
 #endif
 
 } // namespace c10::cuda
diff --git a/cmake/public/LoadHIP.cmake b/cmake/public/LoadHIP.cmake
index 3eb34b0b83..538140fc16 100644
--- a/cmake/public/LoadHIP.cmake
+++ b/cmake/public/LoadHIP.cmake
@@ -77,9 +77,10 @@ endmacro()
 # Find the HIP Package
 # MODULE argument is added for clarity that CMake is searching
 # for FindHIP.cmake in Module mode
-find_package_and_print_version(HIP 1.0 MODULE)
+find_package_and_print_version(HIP MODULE)
 
 if(HIP_FOUND)
+  include(${ROCM_PATH}/lib64/cmake/hip/FindHIP.cmake)
   set(PYTORCH_FOUND_HIP TRUE)
 
   # Find ROCM version for checks
diff --git a/third_party/sleef.BUILD b/third_party/sleef.BUILD
index f22a6e905e..8eee89d689 100644
--- a/third_party/sleef.BUILD
+++ b/third_party/sleef.BUILD
@@ -173,12 +173,12 @@ genrule(
 genrule(
     name = "sleef_h",
     srcs = [
-        "src/libm/sleeflibm_header.h.org.in",
+        "src/libm/sleeflibm_header.h.org",
         "src/libm/sleeflibm_footer.h.org",
     ],
     outs = ["build/include/sleef.h"],
     cmd = "{ " + "; ".join([
-        "cat $(location src/libm/sleeflibm_header.h.org.in)",
+        "cat $(location src/libm/sleeflibm_header.h.org)",
         "$(location :mkrename) cinz_ 2 4 __m128d __m128 __m128i __m128i __SSE2__",
         "$(location :mkrename) cinz_ 2 4 __m128d __m128 __m128i __m128i __SSE2__ sse2",
         "$(location :mkrename) cinz_ 2 4 __m128d __m128 __m128i __m128i __SSE2__ sse4",

diff --git a/cmake/CheckAbi.cmake b/cmake/CheckAbi.cmake
index e483510e58..09ec891db8 100644
--- a/cmake/CheckAbi.cmake
+++ b/cmake/CheckAbi.cmake
@@ -5,9 +5,12 @@ endif()
 
 # XXX This ABI check cannot be run with arm-linux-androideabi-g++
 message(STATUS "${CMAKE_CXX_COMPILER} ${PROJECT_SOURCE_DIR}/torch/abi-check.cpp -o ${CMAKE_BINARY_DIR}/abi-check")
+set(CXX_FLAGS ${CMAKE_CXX_FLAGS})
+separate_arguments(CXX_FLAGS)
 execute_process(
   COMMAND
   "${CMAKE_CXX_COMPILER}"
+  ${CXX_FLAGS}
   "${PROJECT_SOURCE_DIR}/torch/abi-check.cpp"
   "-o"
   "${CMAKE_BINARY_DIR}/abi-check"

diff --git a/cmake/Modules/FindOpenMP.cmake b/cmake/Modules/FindOpenMP.cmake
index 01cc3a4812..341cbaa00f 100644
--- a/cmake/Modules/FindOpenMP.cmake
+++ b/cmake/Modules/FindOpenMP.cmake
@@ -301,7 +301,7 @@ function(_OPENMP_GET_FLAGS LANG FLAG_MODE OPENMP_FLAG_VAR OPENMP_LIB_NAMES_VAR)
     if(OpenMP_libomp_LIBRARY)
       message(STATUS "Check OMP with lib ${OpenMP_libomp_LIBRARY} and flags ${OPENMP_FLAGS_TEST}")
       try_compile( OpenMP_COMPILE_RESULT_${FLAG_MODE}_${OPENMP_PLAIN_FLAG} ${CMAKE_BINARY_DIR} ${_OPENMP_TEST_SRC}
-        CMAKE_FLAGS "-DCOMPILE_DEFINITIONS:STRING=${OPENMP_FLAGS_TEST}"
+        CMAKE_FLAGS "-DCOMPILE_DEFINITIONS:STRING=${OPENMP_FLAGS_TEST}" ${CMAKE_CXX_FLAGS}
         LINK_LIBRARIES ${CMAKE_${LANG}_VERBOSE_FLAG} ${OpenMP_libomp_LIBRARY}
         OUTPUT_VARIABLE OpenMP_TRY_COMPILE_OUTPUT
       )
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index 8c71c0b95f..b5c8d32ea4 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -147,7 +147,7 @@ if(USE_ROCM)
       USE_ROCM
       __HIP_PLATFORM_AMD__
       )
-    list(APPEND TORCH_PYTHON_LINK_LIBRARIES ${ROCM_ROCTX_LIB})
+#    list(APPEND TORCH_PYTHON_LINK_LIBRARIES ${ROCM_ROCTX_LIB})
 endif()
 
 if(USE_XPU)
diff --git a/aten/src/ATen/cpu/Utils.cpp b/aten/src/ATen/cpu/Utils.cpp
index b7b99e50d9..5e9020e5fd 100644
--- a/aten/src/ATen/cpu/Utils.cpp
+++ b/aten/src/ATen/cpu/Utils.cpp
@@ -1,6 +1,6 @@
 #include <cassert>
 #include <ATen/cpu/Utils.h>
-#if !defined(__s390x__ ) && !defined(__powerpc__)
+#if !defined(__s390x__ ) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
 #include <cpuinfo.h>
 #endif
 #if defined(__linux__)
@@ -10,7 +10,7 @@
 
 namespace at::cpu {
 bool is_avx2_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx2();
 #else
   return false;
@@ -18,7 +18,7 @@ bool is_avx2_supported() {
 }
 
 bool is_avx512_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx512f() && cpuinfo_has_x86_avx512vl() && cpuinfo_has_x86_avx512bw() && cpuinfo_has_x86_avx512dq();
 #else
   return false;
@@ -26,7 +26,7 @@ bool is_avx512_supported() {
 }
 
 bool is_avx512_vnni_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx512vnni();
 #else
   return false;
@@ -34,7 +34,7 @@ bool is_avx512_vnni_supported() {
 }
 
 bool is_avx512_bf16_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_avx512bf16();
 #else
   return false;
@@ -42,7 +42,7 @@ bool is_avx512_bf16_supported() {
 }
 
 bool is_amx_tile_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return cpuinfo_initialize() && cpuinfo_has_x86_amx_tile();
 #else
   return false;
@@ -50,7 +50,7 @@ bool is_amx_tile_supported() {
 }
 
 bool is_amx_fp16_supported() {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   return is_amx_tile_supported() && cpuinfo_has_x86_amx_fp16();
 #else
   return false;
@@ -62,7 +62,7 @@ bool init_amx() {
     return false;
   }
 
-#if defined(__linux__) && !defined(__ANDROID__) && defined(__x86_64__)
+#if defined(__linux__) && !defined(__ANDROID__) && defined(__x86_64__)&& !defined(__loongarch_lp64)
 #define XFEATURE_XTILECFG 17
 #define XFEATURE_XTILEDATA 18
 #define XFEATURE_MASK_XTILECFG (1 << XFEATURE_XTILECFG)
@@ -101,7 +101,7 @@ bool is_arm_sve_supported() {
 }
 
 static uint32_t get_cache_size(int level) {
-#if !defined(__s390x__) && !defined(__powerpc__)
+#if !defined(__s390x__) && !defined(__powerpc__)&& !defined(__loongarch_lp64)
   if (!cpuinfo_initialize()) {
     return 0;
   }
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index e36a087509..d15849b14e 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1007,6 +1007,7 @@ if(USE_ROCM)
       caffe2_update_option(USE_SYSTEM_NCCL ON)
     endif()
 
+    separate_arguments(HIP_CXX_FLAGS UNIX_COMMAND $ENV{HIP_CXX_FLAGS})
     list(APPEND HIP_CXX_FLAGS -fPIC)
     list(APPEND HIP_CXX_FLAGS -D__HIP_PLATFORM_AMD__=1)
     list(APPEND HIP_CXX_FLAGS -DCUDA_HAS_FP16=1)
@@ -1019,7 +1020,6 @@ if(USE_ROCM)
     list(APPEND HIP_CXX_FLAGS -Wno-duplicate-decl-specifier)
     list(APPEND HIP_CXX_FLAGS -DCAFFE2_USE_MIOPEN)
     list(APPEND HIP_CXX_FLAGS -DTHRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_HIP)
-    list(APPEND HIP_CXX_FLAGS -std=c++17)
     list(APPEND HIP_CXX_FLAGS -DHIPBLAS_V2)
     if(HIP_NEW_TYPE_ENUMS)
       list(APPEND HIP_CXX_FLAGS -DHIP_NEW_TYPE_ENUMS)
@@ -1040,6 +1040,7 @@ if(USE_ROCM)
     set(HIP_CLANG_FLAGS ${HIP_CXX_FLAGS})
     # Ask hcc to generate device code during compilation so we can use
     # host linker to link.
+    list(APPEND HIP_CLANG_FLAGS -mprintf-kind=buffered)
     list(APPEND HIP_CLANG_FLAGS -fno-gpu-rdc)
     foreach(pytorch_rocm_arch ${PYTORCH_ROCM_ARCH})
       list(APPEND HIP_CLANG_FLAGS --offload-arch=${pytorch_rocm_arch})
@@ -1667,7 +1668,7 @@ if(USE_KINETO)
 
   if(NOT LIBKINETO_NOROCTRACER)
     if("$ENV{ROCM_SOURCE_DIR}" STREQUAL "")
-      set(ENV{ROCM_SOURCE_DIR} "/opt/rocm")
+      set(ENV{ROCM_SOURCE_DIR} "/opt/rocm-6.4.0")
     endif()
   endif()
 
diff --git a/c10/util/Half.h b/c10/util/Half.h
index 53aa62eba8..9ccdc04430 100644
--- a/c10/util/Half.h
+++ b/c10/util/Half.h
@@ -229,7 +229,7 @@ C10_HOST_DEVICE inline float fp16_ieee_to_fp32_value(uint16_t h) {
   // const float exp_scale = 0x1.0p-112f;
   constexpr uint32_t scale_bits = (uint32_t)15 << 23;
   float exp_scale_val = 0;
-  std::memcpy(&exp_scale_val, &scale_bits, sizeof(exp_scale_val));
+  memcpy(&exp_scale_val, &scale_bits, sizeof(exp_scale_val));
   const float exp_scale = exp_scale_val;
   const float normalized_value =
       fp32_from_bits((two_w >> 4) + exp_offset) * exp_scale;
diff --git a/aten/src/ATen/core/TensorBase.h b/aten/src/ATen/core/TensorBase.h
index 2d202a63ef..426b7edd4a 100644
--- a/aten/src/ATen/core/TensorBase.h
+++ b/aten/src/ATen/core/TensorBase.h
@@ -594,11 +594,13 @@ class TORCH_API TensorBase {
     return mutable_data_ptr();
   }
 
-  template <typename T, std::enable_if_t<!std::is_const_v<T>, int> = 0>
+  template <typename T
+//, std::enable_if_t<!std::is_const_v<T>, int> = 0
+>
   const T* const_data_ptr() const;
 
-  template <typename T, std::enable_if_t<std::is_const_v<T>, int> = 0>
-  const std::remove_const_t<T>* const_data_ptr() const;
+//  template <typename T, std::enable_if_t<std::is_const_v<T>, int> = 0>
+//  const std::remove_const_t<T>* const_data_ptr() const;
 
   template <typename T>
   T* mutable_data_ptr() const;

diff --git a/torch/distributed/rpc/__init__.py b/torch/distributed/rpc/__init__.py
index 6c6608a2a7..05fb40eea8 100644
--- a/torch/distributed/rpc/__init__.py
+++ b/torch/distributed/rpc/__init__.py
@@ -22,7 +22,7 @@ _init_counter_lock = threading.Lock()
 
 
 def is_available() -> bool:
-    return hasattr(torch._C, "_rpc_init")
+    return False
 
 
 if is_available() and not torch._C._rpc_init():
diff --git a/caffe2/utils/string_utils.cc b/caffe2/utils/string_utils.cc
index ba763738f7..81afd9c82f 100644
--- a/caffe2/utils/string_utils.cc
+++ b/caffe2/utils/string_utils.cc
@@ -4,6 +4,7 @@
 #include <sstream>
 #include <vector>
 #include <cstdint>
+#include <stdint.h>
 
 namespace caffe2 {
 
diff --git a/aten/src/ATen/cuda/detail/DeviceThreadHandles.h b/aten/src/ATen/cuda/detail/DeviceThreadHandles.h
index 1f80c863b6..b39a97b78c 100644
--- a/aten/src/ATen/cuda/detail/DeviceThreadHandles.h
+++ b/aten/src/ATen/cuda/detail/DeviceThreadHandles.h
@@ -16,10 +16,13 @@
 #pragma once
 
 #include <unordered_map>
-#include <vector>
 #include <utility>
+#pragma push_macro("__glibcxx_assert")
+#define __glibcxx_assert(_Condition)
+#include <vector>
 #include <mutex>
 #include <memory>
+#pragma pop_macro("__glibcxx_assert")
 
 #include <c10/util/Exception.h>
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index dee2a96a01..1b164b882a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -883,7 +883,7 @@ cmake_dependent_option(
 #
 if(USE_ROCM)
   if(USE_FLASH_ATTENTION OR USE_MEM_EFF_ATTENTION)
-    include(cmake/External/aotriton.cmake)
+#    include(cmake/External/aotriton.cmake)
   endif()
 endif()
 
