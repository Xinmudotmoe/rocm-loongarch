diff --git a/hipamd/src/hip_graph_internal.cpp b/hipamd/src/hip_graph_internal.cpp
index 794293b7f..3054f93aa 100644
--- a/hipamd/src/hip_graph_internal.cpp
+++ b/hipamd/src/hip_graph_internal.cpp
@@ -979,9 +979,21 @@ void GraphKernelArgManager::ReadBackOrFlush() {
       address dev_ptr =
           kernarg_graph_.back().kernarg_pool_addr_ + kernarg_graph_.back().kernarg_pool_size_;
       auto kSentinel = *reinterpret_cast<volatile unsigned char*>(dev_ptr - 1);
+#if defined(__x86_64__)
       _mm_sfence();
+#elif defined(__loongarch_lp64)
+      asm("dbar 0");
+#elif defined(__riscv)
+      asm("fence rw,rw");
+#endif
       *(dev_ptr - 1) = kSentinel;
+#if defined(__x86_64__)
       _mm_mfence();
+#elif defined(__loongarch_lp64)
+      asm("dbar 0");
+#elif defined(__riscv)
+      asm("fence rw,rw");
+#endif
       kSentinel = *reinterpret_cast<volatile unsigned char*>(dev_ptr - 1);
     }
   }
diff --git a/rocclr/device/rocm/rocvirtual.cpp b/rocclr/device/rocm/rocvirtual.cpp
index 722450a14..772bb552f 100644
--- a/rocclr/device/rocm/rocvirtual.cpp
+++ b/rocclr/device/rocm/rocvirtual.cpp
@@ -3282,9 +3282,21 @@ bool VirtualGPU::submitKernelInternal(const amd::NDRangeContainer& sizes,
           auto kSentinel = *reinterpret_cast<volatile int*>(dev().info().hdpMemFlushCntl);
         } else if (kernArgImpl == KernelArgImpl::DeviceKernelArgsReadback &&
                    argSize != 0) {
+#if defined(__x86_64__)
           _mm_sfence();
+#elif defined(__loongarch_lp64)
+          asm("dbar 0");
+#elif defined(__riscv)
+          asm("fence rw,rw");
+#endif
           *(argBuffer + argSize - 1) = *(parameters + argSize - 1);
+#if defined(__x86_64__)
           _mm_mfence();
+#elif defined(__loongarch_lp64)
+          asm("dbar 0");
+#elif defined(__riscv)
+          asm("fence rw,rw");
+#endif
           auto kSentinel = *reinterpret_cast<volatile unsigned char*>(
               argBuffer + argSize - 1);
         }
diff --git a/rocclr/include/top.hpp b/rocclr/include/top.hpp
index d6aa00c8d..99b5ae96a 100644
--- a/rocclr/include/top.hpp
+++ b/rocclr/include/top.hpp
@@ -25,6 +25,8 @@
 #define ATI_ARCH_ARM
 #elif defined(i386) || defined(__i386) || defined(__i386__) || defined(_M_IX86) || defined(__x86__) || defined(__x86_64) || defined(__x86_64__) || defined(__amd64) || defined(__amd64__) || defined(_M_X64) || defined(_M_AMD64)
 #define ATI_ARCH_X86
+#elif defined(__riscv)
+#define ATI_ARCH_RISCV
 #endif
 
 #if defined(ATI_ARCH_ARM)
diff --git a/rocclr/os/os.hpp b/rocclr/os/os.hpp
index 8509cc362..be3dd1f54 100644
--- a/rocclr/os/os.hpp
+++ b/rocclr/os/os.hpp
@@ -358,6 +358,13 @@ ALWAYSINLINE address Os::currentStackPtr() {
 #elif defined(ATI_ARCH_ARM)
       "mov %0,sp"
       : "=r"(value)
+#elif defined(__loongarch_lp64)
+      "addi.d %0,$sp,0"
+      : "=r"(value)
+
+#elif defined(ATI_ARCH_RISCV)
+      "mv %0,sp"
+      : "=r"(value)
 #else
       ""
 #endif
