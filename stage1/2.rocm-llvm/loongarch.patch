diff --git a/clang/include/clang/Basic/Builtins.td b/clang/include/clang/Basic/Builtins.td
index 4133f6ff40cf..07c85801d51d 100644
--- a/clang/include/clang/Basic/Builtins.td
+++ b/clang/include/clang/Basic/Builtins.td
@@ -307,6 +307,13 @@ def NanF128 : Builtin {
   let Prototype = "__float128(char const*)";
 }
 
+def NansQ : Builtin {
+  let Spellings = ["__builtin_nansq"];
+  let Attributes = [FunctionWithBuiltinPrefix, NoThrow, Pure, Constexpr];
+  let Prototype = "__float128(char const*)";
+}
+
+
 def Nans : Builtin,
     Template<["float", "double", "long double", "_Float16", "__float128"],
              ["f",     "",       "l",           "f16",      "f128"]> {
diff --git a/clang/lib/AST/ExprConstant.cpp b/clang/lib/AST/ExprConstant.cpp
index e4895e574744..385923cb432b 100644
--- a/clang/lib/AST/ExprConstant.cpp
+++ b/clang/lib/AST/ExprConstant.cpp
@@ -14889,6 +14889,7 @@ bool FloatExprEvaluator::VisitCallExpr(const CallExpr *E) {
   case Builtin::BI__builtin_nansl:
   case Builtin::BI__builtin_nansf16:
   case Builtin::BI__builtin_nansf128:
+  case Builtin::BI__builtin_nansq:
     if (!TryEvaluateBuiltinNaN(Info.Ctx, E->getType(), E->getArg(0),
                                true, Result))
       return Error(E);
diff --git a/clang/lib/AST/Interp/InterpBuiltin.cpp b/clang/lib/AST/Interp/InterpBuiltin.cpp
index 98928b3c22d7..b7ac2b4810ec 100644
--- a/clang/lib/AST/Interp/InterpBuiltin.cpp
+++ b/clang/lib/AST/Interp/InterpBuiltin.cpp
@@ -1149,6 +1149,7 @@ bool InterpretBuiltin(InterpState &S, CodePtr OpPC, const Function *F,
   case Builtin::BI__builtin_nansl:
   case Builtin::BI__builtin_nansf16:
   case Builtin::BI__builtin_nansf128:
+  case Builtin::BI__builtin_nansq:
     if (!interp__builtin_nan(S, OpPC, Frame, F, /*Signaling=*/true))
       return false;
     break;
diff --git a/clang/lib/Basic/Targets/LoongArch.h b/clang/lib/Basic/Targets/LoongArch.h
index 5fc223483951..976f4c3b4aaa 100644
--- a/clang/lib/Basic/Targets/LoongArch.h
+++ b/clang/lib/Basic/Targets/LoongArch.h
@@ -44,6 +44,12 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+
+    HasFloat128 = true;
+    HasFloat16 = true;
+    HasBFloat16 = true;
+    BFloat16Format = &llvm::APFloat::BFloat();
+    BFloat16Width = BFloat16Align = 16;
   }
 
   bool setCPU(const std::string &Name) override {
diff --git a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index 66d7569ee9ae..ef55a3fef4a1 100644
--- a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -613,6 +613,7 @@ Expected<StringRef> linkDevice(ArrayRef<StringRef> InputFiles,
   case Triple::ppc64:
   case Triple::ppc64le:
   case Triple::systemz:
+  case Triple::loongarch64:
     return generic::clang(InputFiles, Args);
   default:
     return createStringError(Triple.getArchName() +
diff --git a/llvm/include/llvm/ADT/SmallVector.h b/llvm/include/llvm/ADT/SmallVector.h
index 09676d792dfe..4757855fdf29 100644
--- a/llvm/include/llvm/ADT/SmallVector.h
+++ b/llvm/include/llvm/ADT/SmallVector.h
@@ -29,6 +29,7 @@
 #include <new>
 #include <type_traits>
 #include <utility>
+#include <cstdint>
 
 namespace llvm {
 
diff --git a/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h b/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h
index 3ef00f75735b..5712741bec7a 100644
--- a/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h
+++ b/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUMCTargetDesc.h
@@ -16,6 +16,7 @@
 #define LLVM_LIB_TARGET_AMDGPU_MCTARGETDESC_AMDGPUMCTARGETDESC_H
 
 #include <memory>
+#include <cstdint>
 
 namespace llvm {
 class Target;
diff --git a/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index 496f126b7173..52369cd72cf0 100644
--- a/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -1927,7 +1927,22 @@ void LoongArchTargetLowering::ReplaceNodeResults(
     SDValue Src = N->getOperand(0);
     EVT FVT = EVT::getFloatingPointVT(N->getValueSizeInBits(0));
     if (getTypeAction(*DAG.getContext(), Src.getValueType()) !=
-        TargetLowering::TypeSoftenFloat) {
+        TargetLowering::TypeSoftenFloat &&  Src.getValueType() == MVT::f16 ) {
+
+      RTLIB::Libcall LC;
+      LC = RTLIB::getFPTOSINT(MVT::f32, VT);
+      MakeLibCallOptions CallOptions;
+      EVT OpVT = MVT::f32;
+      CallOptions.setTypeListBeforeSoften(OpVT, VT, true);
+      SDValue Chain = SDValue();
+      SDValue Result;
+      std::tie(Result, Chain) =
+          makeLibCall(DAG, LC, VT, Src, CallOptions, DL, Chain);
+      Results.push_back(Result);
+      return;
+    } else
+    if (getTypeAction(*DAG.getContext(), Src.getValueType()) !=
+        TargetLowering::TypeSoftenFloat &&  Src.getValueType() != MVT::f16 ) {
       SDValue Dst = DAG.getNode(LoongArchISD::FTINT, DL, FVT, Src);
       Results.push_back(DAG.getNode(ISD::BITCAST, DL, VT, Dst));
       return;
diff --git a/llvm/lib/Target/LoongArch/LoongArchTargetMachine.cpp b/llvm/lib/Target/LoongArch/LoongArchTargetMachine.cpp
index e83fc08696ae..e1878932e553 100644
--- a/llvm/lib/Target/LoongArch/LoongArchTargetMachine.cpp
+++ b/llvm/lib/Target/LoongArch/LoongArchTargetMachine.cpp
@@ -68,7 +68,7 @@ static CodeModel::Model
 getEffectiveLoongArchCodeModel(const Triple &TT,
                                std::optional<CodeModel::Model> CM) {
   if (!CM)
-    return CodeModel::Small;
+    return TT.isArch64Bit() ? CodeModel::Medium : CodeModel::Small;
 
   switch (*CM) {
   case CodeModel::Small:
diff --git a/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h b/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h
index 451c466fa0c9..642e99d963ef 100644
--- a/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h
+++ b/mlir/include/mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h
@@ -10,6 +10,7 @@
 #define MLIR_DIALECT_AFFINE_IR_VALUEBOUNDSOPINTERFACEIMPL_H
 
 #include "mlir/Support/LLVM.h"
+#include <cstdint>
 
 namespace mlir {
 class DialectRegistry;
diff --git a/mlir/include/mlir/Target/SPIRV/Deserialization.h b/mlir/include/mlir/Target/SPIRV/Deserialization.h
index e39258beeaac..a346a7fd1e5f 100644
--- a/mlir/include/mlir/Target/SPIRV/Deserialization.h
+++ b/mlir/include/mlir/Target/SPIRV/Deserialization.h
@@ -15,6 +15,7 @@
 
 #include "mlir/IR/OwningOpRef.h"
 #include "mlir/Support/LLVM.h"
+#include <cstdint>
 
 namespace mlir {
 class MLIRContext;
diff --git a/openmp/libomptarget/libm/CMakeLists.txt b/openmp/libomptarget/libm/CMakeLists.txt
index e16ce67c527e..41f889072bdb 100644
--- a/openmp/libomptarget/libm/CMakeLists.txt
+++ b/openmp/libomptarget/libm/CMakeLists.txt
@@ -51,6 +51,9 @@ foreach(mcpu ${amdgpu_mcpus})
   if(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "ppc64le")
     set(cpu_target powerpc64le-linux-gnu)
   endif()
+  if(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "loongarch64")
+    set(cpu_target loongarch64-linux-gnu)
+  endif()
   # Need omp.h from the build directory
   set(omp_common_args
     -c 
