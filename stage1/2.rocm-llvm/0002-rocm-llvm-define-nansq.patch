diff --git a/clang/include/clang/Basic/Builtins.td b/clang/include/clang/Basic/Builtins.td
index 4133f6ff40cf..07c85801d51d 100644
--- a/clang/include/clang/Basic/Builtins.td
+++ b/clang/include/clang/Basic/Builtins.td
@@ -307,6 +307,13 @@ def NanF128 : Builtin {
   let Prototype = "__float128(char const*)";
 }
 
+def NansQ : Builtin {
+  let Spellings = ["__builtin_nansq"];
+  let Attributes = [FunctionWithBuiltinPrefix, NoThrow, Pure, Constexpr];
+  let Prototype = "__float128(char const*)";
+}
+
+
 def Nans : Builtin,
     Template<["float", "double", "long double", "_Float16", "__float128"],
              ["f",     "",       "l",           "f16",      "f128"]> {
diff --git a/clang/lib/AST/ExprConstant.cpp b/clang/lib/AST/ExprConstant.cpp
index e4895e574744..385923cb432b 100644
--- a/clang/lib/AST/ExprConstant.cpp
+++ b/clang/lib/AST/ExprConstant.cpp
@@ -14889,6 +14889,7 @@ bool FloatExprEvaluator::VisitCallExpr(const CallExpr *E) {
   case Builtin::BI__builtin_nansl:
   case Builtin::BI__builtin_nansf16:
   case Builtin::BI__builtin_nansf128:
+  case Builtin::BI__builtin_nansq:
     if (!TryEvaluateBuiltinNaN(Info.Ctx, E->getType(), E->getArg(0),
                                true, Result))
       return Error(E);
diff --git a/clang/lib/AST/Interp/InterpBuiltin.cpp b/clang/lib/AST/Interp/InterpBuiltin.cpp
index 98928b3c22d7..b7ac2b4810ec 100644
--- a/clang/lib/AST/Interp/InterpBuiltin.cpp
+++ b/clang/lib/AST/Interp/InterpBuiltin.cpp
@@ -1149,6 +1149,7 @@ bool InterpretBuiltin(InterpState &S, CodePtr OpPC, const Function *F,
   case Builtin::BI__builtin_nansl:
   case Builtin::BI__builtin_nansf16:
   case Builtin::BI__builtin_nansf128:
+  case Builtin::BI__builtin_nansq:
     if (!interp__builtin_nan(S, OpPC, Frame, F, /*Signaling=*/true))
       return false;
     break;
